{"entries":[],"headings":["au-programme","midas-une-base-de-données-volumineuse","midas-une-base-de-données-volumineuse-1","midas-une-base-de-données-volumineuse-2","structure-de-lappariement","le-format-parquet","manipuler-un-appariement-une-opération-coûteuse","lespace-midares","programmer-en-mémoire-vive","les-traitements-coûteux-en-puissance-de-calcul","un-traitement-peu-coûteux","un-traitement-coûteux","initiation-au-calcul-distribué","calcul-distribué-et-calcul-parallèle","le-cluster-de-calcul-midares-mode-interactif","spark","mode-local-concurrence","mode-cluster-non-concurrence","installation-de-spark-sous-casd","le-stockage-distribué-hdfs","le-stockage-distribué-hdfs-1","la-lazy-evaluation","la-lazy-evaluation-1","le-plan-dexécution","récupérer-un-résultat","sparklyr-la-solution-ergonomique-de-spark-sous-r","sparklyr-et-sparkr","configuration-cluster","lutilisation-de-la-mémoire-dans-un-worker","lutilisation-de-la-mémoire-du-driver","ce-qui-change-pour-lutilisateur","quelques-fonctions-spécifiques","une-règle-dor-tester-son-code-pour-collecter-le-moins-possible","quelques-tips-doptimisation","forcer-le-calcul","les-erreurs-en-sparklyr","bonnes-pratiques","pour-aller-plus-loin","larchitecture-map-reduce","la-gestion-de-la-mémoire-avec-spark","utiliser-les-interfaces","exporter-de-hdfs-au-local","pyspark-mode-cluster","les-avantages-de-pyspark","merci-pour-votre-attention"]}